const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function debugLogin() {
  const email = process.argv[2] || 'chervince@gmail.com';
  const password = process.argv[3] || 'Anouwali_555';

  console.log('\nüîç Debug de connexion pour:', email);
  console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

  try {
    // 1. V√©rifier si l'utilisateur existe
    console.log('1Ô∏è‚É£ Recherche de l\'utilisateur dans la base de donn√©es...');
    const user = await prisma.user.findUnique({
      where: { email: email },
    });

    if (!user) {
      console.log('‚ùå ERREUR: Utilisateur non trouv√© dans la base de donn√©es');
      console.log('   Email recherch√©:', email);
      console.log('\nüí° V√©rifiez que l\'email est correct dans public.users');
      return;
    }

    console.log('‚úÖ Utilisateur trouv√© !');
    console.log('   ID:', user.id);
    console.log('   Email:', user.email);
    console.log('   Nom:', user.name);
    console.log('   R√¥le:', user.role);
    console.log('   Password existe:', !!user.password);

    if (user.password) {
      console.log('   Password hash (premiers 20 chars):', user.password.substring(0, 20) + '...');
    }

    // 2. V√©rifier le mot de passe
    console.log('\n2Ô∏è‚É£ V√©rification du mot de passe...');

    if (!user.password) {
      console.log('‚ùå ERREUR: Aucun mot de passe dans la base de donn√©es');
      console.log('   L\'utilisateur n\'a pas de champ password rempli');
      console.log('\nüí° Ex√©cutez cette commande SQL:');
      const hash = await bcrypt.hash(password, 10);
      console.log(`
UPDATE public.users
SET password = '${hash}'
WHERE email = '${email}';
      `);
      return;
    }

    // 3. Tester le hash du mot de passe
    console.log('   Mot de passe √† tester:', password);
    console.log('   Hash stock√©:', user.password);

    const isValid = await bcrypt.compare(password, user.password);

    if (isValid) {
      console.log('‚úÖ Mot de passe VALIDE !');
      console.log('\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
      console.log('‚úÖ L\'authentification devrait FONCTIONNER');
      console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
      console.log('\nüîë Identifiants de connexion:');
      console.log(`   Email: ${email}`);
      console.log(`   Mot de passe: ${password}`);
      console.log(`   R√¥le: ${user.role}`);
    } else {
      console.log('‚ùå ERREUR: Mot de passe INVALIDE');
      console.log('   Le hash ne correspond pas au mot de passe fourni');
      console.log('\nüí° R√©g√©n√©rez le hash avec:');
      console.log(`   node scripts/generate-sql-quick.js ${email} ${password}`);
    }

    // 4. V√©rifier la configuration
    console.log('\n3Ô∏è‚É£ V√©rifications suppl√©mentaires...');

    const allUsers = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        name: true,
        role: true,
        password: true,
      }
    });

    console.log(`   Nombre total d'utilisateurs: ${allUsers.length}`);
    allUsers.forEach((u, i) => {
      console.log(`   ${i + 1}. ${u.email} (${u.role}) - Password: ${!!u.password ? 'OUI' : 'NON'}`);
    });

  } catch (error) {
    console.error('‚ùå ERREUR:', error.message);
    console.error('   D√©tails:', error);
  } finally {
    await prisma.$disconnect();
  }
}

debugLogin();
