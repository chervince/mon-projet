datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

// Modèles de base NextAuth
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  name          String?
  image         String?
  password      String?
  pointsTotal   Int       @default(0)
  role          String    @default("user") // "user" or "admin"
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts Account[]
  credits  Credit[]
  vouchers Voucher[]
  scanLogs ScanLog[]
  sessions Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Nouveaux modèles pour l'app fidélisation
model Merchant {
  id                String @id @default(cuid())
  name              String
  logo              String?
  address           String?
  creditPercentage  Float @default(10.0) // % crédits sur montant ticket (1-20%)
  threshold         Float @default(2000.0) // seuil trigger bon en XPF (≥500)
  validityMonths    Int @default(6) // validité crédits (≥3 mois)
  merchantCode      String @unique // code 4 caractères unique
  qrCode            String @unique // QR onboarding
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  credits   Credit[]
  vouchers  Voucher[]
  scanLogs ScanLog[]

  @@map("merchants")
}

model Credit {
  id         String @id @default(cuid())
  userId     String
  merchantId String
  amount     Float // montant crédits XPF
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)
  merchant Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)

  @@map("credits")
}

model Voucher {
  id           String @id @default(cuid())
  userId       String
  merchantId   String
  amount       Float // valeur bon XPF (égale au seuil)
  qrCode       String @unique // QR unique du bon
  merchantCode String // code sous QR (4 caractères)
  isUsed       Boolean @default(false)
  usedAt       DateTime?
  createdAt    DateTime @default(now())

  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)
  merchant Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)

  @@map("vouchers")
}

model ScanLog {
  id            String @id @default(cuid())
  userId        String
  merchantId    String
  ticketAmount  Float // montant ticket scanné XPF
  creditsEarned Float // crédits attribués
  timestamp     DateTime @default(now())
  ip            String? // IP pour logs

  user     User @relation(fields: [userId], references: [id], onDelete: Cascade)
  merchant Merchant @relation(fields: [merchantId], references: [id], onDelete: Cascade)

  @@map("scan_logs")
}
